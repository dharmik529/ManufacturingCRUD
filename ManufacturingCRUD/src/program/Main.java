package program;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import entity.*;
import java.util.Optional;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;


public class Main extends javax.swing.JFrame {
    private static DAO stationDAO, partDAO;

    public Main() {
        initComponents();
        refreshStationsTable();
        refreshPartsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneHotDogStand = new javax.swing.JTabbedPane();
        jPanelCustomer = new javax.swing.JPanel();
        jScrollPaneCustomer = new javax.swing.JScrollPane();
        StationTable = new javax.swing.JTable();
        StationIDtxt = new javax.swing.JTextField();
        StationColortxt = new javax.swing.JTextField();
        jLabelStationColor = new javax.swing.JLabel();
        jLabelStationID = new javax.swing.JLabel();
        btnCreateStation = new javax.swing.JButton();
        btnUpdateStation = new javax.swing.JButton();
        btnDeleteStation = new javax.swing.JButton();
        jPanelOrder = new javax.swing.JPanel();
        jScrollPaneOrder = new javax.swing.JScrollPane();
        TablePart = new javax.swing.JTable();
        txtpartID = new javax.swing.JTextField();
        javax.swing.JLabel jLabelPartID = new javax.swing.JLabel();
        jLabelRepair = new javax.swing.JLabel();
        txtpartRepair = new javax.swing.JTextField();
        txtpartStationID = new javax.swing.JTextField();
        jLabelPartStationIID = new javax.swing.JLabel();
        jLabelPartDateTime = new javax.swing.JLabel();
        btnCreatePart = new javax.swing.JButton();
        btnUpdatePart = new javax.swing.JButton();
        btnDeletePart = new javax.swing.JButton();
        jLabelPartStationColor = new javax.swing.JLabel();
        txtpartStationColor = new javax.swing.JTextField();
        dateTimePicker1 = new com.github.lgooddatepicker.components.DateTimePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HotDog Stand CRUD");
        setResizable(false);

        jTabbedPaneHotDogStand.setName("Customer"); // NOI18N

        StationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StationID", "Station Color"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StationTableMouseClicked(evt);
            }
        });
        jScrollPaneCustomer.setViewportView(StationTable);

        jLabelStationColor.setText("Station Color");
        jLabelStationColor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStationID.setText("StationID");
        jLabelStationID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        btnCreateStation.setText("Create");
        btnCreateStation.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreateStation.setIconTextGap(0);
        btnCreateStation.setInheritsPopupMenu(true);
        btnCreateStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateStationActionPerformed(evt);
            }
        });

        btnUpdateStation.setText("Update");
        btnUpdateStation.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStationActionPerformed(evt);
            }
        });

        btnDeleteStation.setText("Delete");
        btnDeleteStation.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCustomerLayout = new javax.swing.GroupLayout(jPanelCustomer);
        jPanelCustomer.setLayout(jPanelCustomerLayout);
        jPanelCustomerLayout.setHorizontalGroup(
            jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelStationColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelCustomerLayout.createSequentialGroup()
                        .addComponent(jLabelStationID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StationIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StationColortxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addComponent(jScrollPaneCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(btnCreateStation, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateStation, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteStation, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(754, 754, 754))
        );

        jPanelCustomerLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {StationColortxt, StationIDtxt});

        jPanelCustomerLayout.setVerticalGroup(
            jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCustomerLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelStationID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StationIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelStationColor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StationColortxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateStation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteStation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateStation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPaneHotDogStand.addTab("Station", jPanelCustomer);

        TablePart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Part ID", "Repair", "Station ID", "Date/Time", "Station Color"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePartMouseClicked(evt);
            }
        });
        jScrollPaneOrder.setViewportView(TablePart);
        if (TablePart.getColumnModel().getColumnCount() > 0) {
            TablePart.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabelPartID.setText("Part ID");
        jLabelPartID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelRepair.setText("Repaired?");
        jLabelRepair.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelPartStationIID.setText("Station ID");
        jLabelPartStationIID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartStationIID.setToolTipText("");

        jLabelPartDateTime.setText("Assembly Date/Time");
        jLabelPartDateTime.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartDateTime.setToolTipText("");

        btnCreatePart.setText("Create");
        btnCreatePart.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreatePart.setIconTextGap(0);
        btnCreatePart.setInheritsPopupMenu(true);
        btnCreatePart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePartActionPerformed(evt);
            }
        });

        btnUpdatePart.setText("Update");
        btnUpdatePart.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdatePart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePartActionPerformed(evt);
            }
        });

        btnDeletePart.setText("Delete");
        btnDeletePart.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeletePart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePartActionPerformed(evt);
            }
        });

        jLabelPartStationColor.setText("Station Color");
        jLabelPartStationColor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPartStationColor.setToolTipText("");

        javax.swing.GroupLayout jPanelOrderLayout = new javax.swing.GroupLayout(jPanelOrder);
        jPanelOrder.setLayout(jPanelOrderLayout);
        jPanelOrderLayout.setHorizontalGroup(
            jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOrderLayout.createSequentialGroup()
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelOrderLayout.createSequentialGroup()
                                .addComponent(jLabelPartStationColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanelOrderLayout.createSequentialGroup()
                                .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPartID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelRepair, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelPartStationIID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)))
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelOrderLayout.createSequentialGroup()
                                .addComponent(btnCreatePart, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdatePart, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeletePart, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelOrderLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtpartStationID)
                                    .addComponent(txtpartID, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtpartRepair)))
                            .addGroup(jPanelOrderLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(txtpartStationColor))))
                    .addGroup(jPanelOrderLayout.createSequentialGroup()
                        .addComponent(jLabelPartDateTime)
                        .addGap(18, 18, 18)
                        .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPaneOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(598, 598, 598))
        );

        jPanelOrderLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateTimePicker1, txtpartID, txtpartRepair, txtpartStationColor, txtpartStationID});

        jPanelOrderLayout.setVerticalGroup(
            jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrderLayout.createSequentialGroup()
                .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOrderLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelPartID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtpartID))
                        .addGap(10, 10, 10)
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpartRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPartStationIID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpartStationID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPartDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtpartStationColor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPartStationColor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelOrderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdatePart, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletePart, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreatePart, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPaneHotDogStand.addTab("Part", jPanelOrder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneHotDogStand, javax.swing.GroupLayout.PREFERRED_SIZE, 1068, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneHotDogStand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPaneHotDogStand.getAccessibleContext().setAccessibleName("Order");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TablePartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePartMouseClicked
        int i = TablePart.getSelectedRow();
        TableModel model = TablePart.getModel();
        txtpartID.setText(model.getValueAt(i, 0).toString());
        txtpartRepair.setText(model.getValueAt(i, 1).toString());
        txtpartStationID.setText(model.getValueAt(i, 2).toString());
        
        String date = model.getValueAt(i, 3).toString();

        /** 
         * Takes the String value from the Part Date Time column and parse the String using substring method.
         * LocalDate.of() takes in 3 integer value of year, month, date and returns a LocalDate object. LocalDate.of(y, m, d)
         * LocalTime.of() similarly takes in 2 integer value of hour, minute. LocalTime.of(h, m)
         * 
         * Example: 
            * String date = 2021-02-23 08:49:11.556;
            * date.substring(0, 4) returns 2021 /year
            * date.substring(5, 7) returns 02 /month
            * date.substring(8, 10) returns 23 /day
            * date.substring(11, 13) returns 08 /hour
            * date.substring(14, 16) returns 49 /min
        */ 
        LocalDate date1 = LocalDate.of(Integer.parseInt(date.substring(0, 4)) , 
                Integer.parseInt(date.substring(5, 7)), Integer.parseInt(date.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(date.substring(11, 13)), Integer.parseInt(date.substring(14, 16)));
        
        /**
         * LocalDate object is inserted into datePicker.setDate() to set the value of the dataPicker.
         * LocalTime object is inserted into timePicker.setTime() to set the value of the timePicker.
         */
        dateTimePicker1.datePicker.setDate(date1);
        dateTimePicker1.timePicker.setTime(time1);
        txtpartStationColor.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_TablePartMouseClicked

    private void btnCreatePartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePartActionPerformed
        // TODO add your handling code here:
        //System.out.println(dateTimePicker.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker.timePicker.getTimeStringOrEmptyString()+":00.0");
       if (!txtpartID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtpartID.getText().trim());
            boolean Repair = Boolean.parseBoolean(txtpartRepair.getText().trim());
            int partStationID = Integer.parseInt(txtpartStationID.getText().trim());
            String date = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            String partStationColor = txtpartStationColor.getText().trim();
            primaryKeyViolationPart(ID);
            foreignKeyViolationPart(partStationID, partStationColor);
            addPart(ID,Repair, partStationID, date, partStationColor);
            refreshPartsTable();
            clearPartTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_btnCreatePartActionPerformed

    private void btnUpdatePartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePartActionPerformed
        if (!txtpartID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtpartID.getText().trim());
            Boolean Repair = Boolean.parseBoolean(txtpartRepair.getText().trim());
            int partStationID = Integer.parseInt(txtpartStationID.getText().trim());
            String date = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            String partStationColor = txtpartStationColor.getText().trim();
            Part part = getPart(ID);
            if(part.getID() != -1) {
                foreignKeyViolationPart(partStationID, partStationColor);
                updatePart(ID,Repair, partStationID, date, partStationColor);
                refreshPartsTable();
            }
            else
            {
                alert("Part does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_btnUpdatePartActionPerformed

    private void btnDeletePartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePartActionPerformed
       if (!txtpartID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtpartID.getText().trim());
            Boolean Repair = Boolean.parseBoolean(txtpartRepair.getText().trim());
            int partStationID = Integer.parseInt(txtpartStationID.getText().trim());
            String date = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            String partStationColor = txtpartStationColor.getText().trim();
            Part part = getPart(ID);
            if(part.getID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deletePart(ID, Repair, partStationID, date, partStationColor);
                    refreshPartsTable();
                    clearPartTextFields();
                }
            }
            else
            {
                alert("Part does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_btnDeletePartActionPerformed

    //handles delete button action
    private void btnDeleteStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStationActionPerformed
        // TODO add your handling code here:
        if (!StationIDtxt.getText().isEmpty()) {
            int ID = Integer.parseInt(StationIDtxt.getText().trim());
            String StationColor = StationColortxt.getText().trim();                        
            Station station = getStation(ID, StationColor);
            if(station.getID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteStation(ID,StationColor);
                    refreshStationsTable();
                    clearStationTextFields();
                }
            }
            else
            {
                alert("Station does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_btnDeleteStationActionPerformed

    //handles update button action
    private void btnUpdateStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStationActionPerformed
        // TODO add your handling code here:
        if (!StationIDtxt.getText().isEmpty()) {
            int ID = Integer.parseInt(StationIDtxt.getText().trim());            
            String StationColor = StationColortxt.getText().trim();            
            Station station = getStation(ID, StationColor);
            if(station.getID() != -1) {
                updateStation(ID, StationColor);
                refreshStationsTable();
            }
            else
            {
                alert("Station does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_btnUpdateStationActionPerformed

    //handle insert button action
    private void btnCreateStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateStationActionPerformed
        // TODO add your handling code here:

        if (!StationIDtxt.getText().isEmpty()) {
            int ID = Integer.parseInt(StationIDtxt.getText().trim());            
            String StationColor = StationColortxt.getText().trim();            
            primaryKeyViolationStation(ID, StationColor);
            addStation(ID, StationColor);
            refreshStationsTable();
            clearStationTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_btnCreateStationActionPerformed

    //set the values of a row to the textfields
    private void StationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StationTableMouseClicked
        // TODO add your handling code here:
        int i = StationTable.getSelectedRow();
        TableModel model = StationTable.getModel();
        StationIDtxt.setText(model.getValueAt(i, 0).toString());        
        StationColortxt.setText(model.getValueAt(i, 1).toString());       
    }//GEN-LAST:event_StationTableMouseClicked



    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
    
    //method to check for part's station id foreign key violation
    public void foreignKeyViolationPart(int id, String StationColor) {
        if(getStation(id, StationColor).getID() == -1) {
            alert("Station ID does not exist", "Foreign Key Violation");
        }
    }
    
    //method to check for station primary key violation
    public void primaryKeyViolationStation(int id, String StationColor) {
        if(getStation(id, StationColor).getID() != -1) {
            alert("Another station already exists with same Station ID, please try another Station ID", "Primary Key Violation");
        }
    }
    
    //method to check for part primary key violation
    public void primaryKeyViolationPart(int id) {
        if(getPart(id).getID() != -1) {
            alert("Another part already exists with same Part ID, please try another Part ID", "Primary Key Violation");
        }
    }
    
    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * CUSTOMER CRUD FUNCTIONS
    */
    private static void addStation(int id, String color) {
        Station station;
        station = new Station(id, color);
        stationDAO.insert(station);
    }
    
    private static void updateStation(int id, String color) {
        Station station;
        station = new Station(id, color);
        stationDAO.update(station);
    }
    
    private static void deleteStation(int id, String color) {
        Station contact;
        contact = new Station(id, color);
        stationDAO.delete(contact);
    }
    
    static Station getStation(int id, String StationColor) {
        Optional<Station> station = stationDAO.get(id);
        return station.orElseGet(() -> new Station(-1, "Non-exist"));
    }
    
    
    /**
     * ORDER CRUD FUNCTIONS
    */
    private static void addPart(int ID, boolean Repair, int partStationID, String dateTimeAssembled, String partStationColor) {
        Part part;
        part = new Part(ID, Repair, partStationID, dateTimeAssembled, partStationColor);
        partDAO.insert(part); 
    }
    
    private static void updatePart(int ID, Boolean Repair, int partStationID,String dateTimeAssembled, String partStationColor) {
        Part part;
        part = new Part(ID, Repair, partStationID, dateTimeAssembled, partStationColor);
        partDAO.update(part);
    }
    
    private static void deletePart(int ID, Boolean Repair, int partStationID,String dateTimeAssembled, String partStationColor) {
        Part part;
        part = new Part(ID, Repair, partStationID, dateTimeAssembled, partStationColor);
        partDAO.delete(part);
    }
    
    static Part getPart(int id) {
        Optional<Part> part = partDAO.get(id);
        return part.orElseGet(() -> new Part(-1, false ,-1, "Non-exist", "Non-exist"));
    }
    
    //method to clear the station txt fields
    private void clearStationTextFields() {
        StationIDtxt.setText("");        
        StationColortxt.setText("");        
    }
    
    //method to clear the part txt fields
    private void clearPartTextFields() {
        txtpartID.setText("");
        txtpartRepair.setText("");
        txtpartStationID.setText("");
        txtpartStationColor.setText("");
        dateTimePicker1.datePicker.clear();
        dateTimePicker1.timePicker.clear();
    }

    //fetch station table
    private void refreshStationsTable() {
        List<Station> stations = stationDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) StationTable.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Station station : stations) {
                Object[] row = new Object[4];
                row[0] = station.getID();
                row[1] = station.getStationColor();                                
                model.addRow(row);
        }
    }
    
    //fetch part table
    private void refreshPartsTable() {
        List<Part> parts = partDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) TablePart.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Part part : parts) {
                Object[] row = new Object[6];
                row[0] = part.getID();
                row[1] = part.isRepaired();
                row[2] = part.getStationID();
                row[3] = part.getDateTimeAssembled();
                row[4] = part.getStationColor();                
                model.addRow(row);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        stationDAO = new StationDAO();
        partDAO = new PartDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField StationColortxt;
    private javax.swing.JTextField StationIDtxt;
    private javax.swing.JTable StationTable;
    private javax.swing.JTable TablePart;
    private javax.swing.JButton btnCreatePart;
    private javax.swing.JButton btnCreateStation;
    private javax.swing.JButton btnDeletePart;
    private javax.swing.JButton btnDeleteStation;
    private javax.swing.JButton btnUpdatePart;
    private javax.swing.JButton btnUpdateStation;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker1;
    private javax.swing.JLabel jLabelPartDateTime;
    private javax.swing.JLabel jLabelPartStationColor;
    private javax.swing.JLabel jLabelPartStationIID;
    private javax.swing.JLabel jLabelRepair;
    private javax.swing.JLabel jLabelStationColor;
    private javax.swing.JLabel jLabelStationID;
    private javax.swing.JPanel jPanelCustomer;
    private javax.swing.JPanel jPanelOrder;
    private javax.swing.JScrollPane jScrollPaneCustomer;
    private javax.swing.JScrollPane jScrollPaneOrder;
    private javax.swing.JTabbedPane jTabbedPaneHotDogStand;
    private javax.swing.JTextField txtpartID;
    private javax.swing.JTextField txtpartRepair;
    private javax.swing.JTextField txtpartStationColor;
    private javax.swing.JTextField txtpartStationID;
    // End of variables declaration//GEN-END:variables
}
